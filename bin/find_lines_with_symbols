#!/bin/bash
#
# This is a rather minimal example Argbash potential
# Example taken from http://argbash.readthedocs.io/en/stable/example.html
#
# ARG_OPTIONAL_BOOLEAN([ignore_case],[i],[ignore case])
# ARG_POSITIONAL_SINGLE([input_file],[input file],[])
# ARG_POSITIONAL_SINGLE([symbols],[sequence of symbols],[])
# ARG_POSITIONAL_SINGLE([number_of_occurrences],[number of occurrences],[])
# ARG_HELP([Find which lines in file have the exact number of occurrences of symbols])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.11.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.dev for more info
# Generated online by https://argbash.dev/generate


# # When called, the process ends.
# Args:
# 	$1: The exit message (print to stderr)
# 	$2: The exit code (default is 1)
# if env var _PRINT_HELP is set to 'yes', the usage is print to stderr (prior to $1)
# Example:
# 	test -f "$_arg_infile" || _PRINT_HELP=yes die "Can't continue, have to supply file as an argument, got '$_arg_infile'" 4
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


# Function that evaluates whether a value passed to it begins by a character
# that is a short option of an argument the script knows about.
# This is required in order to support getopts-like short options grouping.
begins_with_short_option()
{
	local first_option all_short_options='ih'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
# The positional args array has to be reset before the parsing, because it may already be defined
# - for example if this script is sourced by an argbash-powered script.
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_ignore_case="off"


# Function that prints general usage of the script.
# This is useful if users asks for it, or if there is an argument parsing error (unexpected / spurious arguments)
# and it makes sense to remind the user how the script is supposed to be called.
print_help()
{
	printf '%s\n' "Find which lines in file have the exact number of occurrences of symbols"
	printf 'Usage: %s [-i|--(no-)ignore_case] [-h|--help] <input_file> <symbols> <number_of_occurrences>\n' "$0"
	printf '\t%s\n' "<input_file>: input file"
	printf '\t%s\n' "<symbols>: sequence of symbols"
	printf '\t%s\n' "<number_of_occurrences>: number of occurrences"
	printf '\t%s\n' "-i, --ignore_case, --no-ignore_case: ignore case (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


# The parsing of the command-line
parse_commandline()
{
	_positionals_count=0
	local _key
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			# The ignore_case argurment doesn't accept a value,
			# we expect the --ignore_case or -i, so we watch for them.
			-i|--no-ignore_case|--ignore_case)
				_arg_ignore_case="on"
				test "${1:0:5}" = "--no-" && _arg_ignore_case="off"
				;;
			# We support getopts-style short arguments clustering,
			# so as -i doesn't accept value, other short options may be appended to it, so we watch for -i*.
			# After stripping the leading -i from the argument, we have to make sure
			# that the first character that follows corresponds to a short option.
			-i*)
				_arg_ignore_case="on"
				_next="${_key##-i}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-i" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			# See the comment of option '--ignore_case' to see what's going on here - principle is the same.
			-h|--help)
				print_help
				exit 0
				;;
			# See the comment of option '-i' to see what's going on here - principle is the same.
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


# Check that we receive expected amount positional arguments.
# Return 0 if everything is OK, 1 if we have too little arguments
# and 2 if we have too much arguments
handle_passed_args_count()
{
	local _required_args_string="'input_file', 'symbols' and 'number_of_occurrences'"
	test "${_positionals_count}" -ge 3 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 3 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 3 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 3 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


# Take arguments that we have received, and save them in variables of given names.
# The 'eval' command is needed as the name of target variable is saved into another variable.
assign_positional_args()
{
	local _positional_name _shift_for=$1
	# We have an array of variables to which we want to save positional args values.
	# This array is able to hold array elements as targets.
	# As variables don't contain spaces, they may be held in space-separated string.
	_positional_names="_arg_input_file _arg_symbols _arg_number_of_occurrences "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

# Now call all the functions defined above that are needed to get the job done
parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


if [[ $_arg_ignore_case == "on" ]] ; then

  awk -v symbol="$_arg_symbols" -v n=$_arg_number_of_occurrences '
BEGIN {
  red = "\033[41m"
  reset = "\033[0m"
  yellow = "\033[1;33m"
}
{
  count = 0
  output = ""
  symbol = tolower(symbol)
  for (i = 1; i <= length($0); i++) {
    c = substr(tolower($0), i, length(symbol))
    if (c == symbol) {
      count++
      output = output red substr($0, i, length(symbol)) reset
      i = i + length(symbol) - 1
    } else {
      output = output substr($0, i, 1)
    }
  }
  if (count == n) {
    print yellow NR reset ": " output
  }
}
' $_arg_input_file

else

  awk -v symbol="$_arg_symbols" -v n=$_arg_number_of_occurrences '
BEGIN {
  red = "\033[41m"
  reset = "\033[0m"
  yellow = "\033[1;33m"
}
{
  count = 0
  output = ""
  for (i = 1; i <= length($0); i++) {
    c = substr($0, i, length(symbol))
    if (c == symbol) {
      count++
      output = output red c reset
      i = i + length(symbol) - 1
    } else {
      output = output substr($0, i, 1)
    }
  }
  if (count == n) {
    print yellow NR reset ": " output
  }
}
' $_arg_input_file

fi

# ] <-- needed because of Argbash
