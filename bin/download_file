#!/bin/bash
#
# Created by: George AraÃºjo (george.gcac@gmail.com)
#
# ARG_OPTIONAL_SINGLE([connections_per_server],[x],[The maximum number of connections to one server for each download],[8])
# ARG_OPTIONAL_SINGLE([dir],[d],[The directory to store the downloaded file],[.])
# ARG_OPTIONAL_SINGLE([input_file],[i],[File to read urls from])
# ARG_OPTIONAL_SINGLE([max_concurrent_downloads],[j],[Maximum concurrent downloads])
# ARG_OPTIONAL_SINGLE([out],[o],[The file name of the downloaded file. It is always relative to the directory given in -d option.])
# ARG_POSITIONAL_INF([uri],[You can specify multiple HTTP(S)/FTP URIs],[0],[])
# ARG_HELP([Download files using aria2c])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


# # When called, the process ends.
# Args:
# 	$1: The exit message (print to stderr)
# 	$2: The exit code (default is 1)
# if env var _PRINT_HELP is set to 'yes', the usage is print to stderr (prior to $1)
# Example:
# 	test -f "$_arg_infile" || _PRINT_HELP=yes die "Can't continue, have to supply file as an argument, got '$_arg_infile'" 4
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


# Function that evaluates whether a value passed to it begins by a character
# that is a short option of an argument the script knows about.
# This is required in order to support getopts-like short options grouping.
begins_with_short_option()
{
	local first_option all_short_options='xdijoh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
# The positional args array has to be reset before the parsing, because it may already be defined
# - for example if this script is sourced by an argbash-powered script.
_positionals=()
_arg_uri=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_connections_per_server="8"
_arg_dir="."
_arg_input_file=
_arg_max_concurrent_downloads=
_arg_out=


# Function that prints general usage of the script.
# This is useful if users asks for it, or if there is an argument parsing error (unexpected / spurious arguments)
# and it makes sense to remind the user how the script is supposed to be called.
print_help()
{
	printf '%s\n' "Download files using aria2c"
	printf 'Usage: %s [-x|--connections_per_server <arg>] [-d|--dir <arg>] [-i|--input_file <arg>] [-j|--max_concurrent_downloads <arg>] [-o|--out <arg>] [-h|--help] [<uri-1>] ... [<uri-n>] ...\n' "$0"
	printf '\t%s\n' "<uri>: You can specify multiple HTTP(S)/FTP URIs (defaults for <uri>: '')"
	printf '\t%s\n' "-x, --connections_per_server: The maximum number of connections to one server for each download (default: '8')"
	printf '\t%s\n' "-d, --dir: The directory to store the downloaded file (default: '.')"
	printf '\t%s\n' "-i, --input_file: File to read urls from (no default)"
	printf '\t%s\n' "-j, --max_concurrent_downloads: Maximum concurrent downloads (no default)"
	printf '\t%s\n' "-o, --out: The file name of the downloaded file. It is always relative to the directory given in -d option. (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


# The parsing of the command-line
parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			# We support whitespace as a delimiter between option argument and its value.
			# Therefore, we expect the --connections_per_server or -x value.
			# so we watch for --connections_per_server and -x.
			# Since we know that we got the long or short option,
			# we just reach out for the next argument to get the value.
			-x|--connections_per_server)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_connections_per_server="$2"
				shift
				;;
			# We support the = as a delimiter between option argument and its value.
			# Therefore, we expect --connections_per_server=value, so we watch for --connections_per_server=*
			# For whatever we get, we strip '--connections_per_server=' using the ${var##--connections_per_server=} notation
			# to get the argument value
			--connections_per_server=*)
				_arg_connections_per_server="${_key##--connections_per_server=}"
				;;
			# We support getopts-style short arguments grouping,
			# so as -x accepts value, we allow it to be appended to it, so we watch for -x*
			# and we strip the leading -x from the argument string using the ${var##-x} notation.
			-x*)
				_arg_connections_per_server="${_key##-x}"
				;;
			# See the comment of option '--connections_per_server' to see what's going on here - principle is the same.
			-d|--dir)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_dir="$2"
				shift
				;;
			# See the comment of option '--connections_per_server=' to see what's going on here - principle is the same.
			--dir=*)
				_arg_dir="${_key##--dir=}"
				;;
			# See the comment of option '-x' to see what's going on here - principle is the same.
			-d*)
				_arg_dir="${_key##-d}"
				;;
			# See the comment of option '--connections_per_server' to see what's going on here - principle is the same.
			-i|--input_file)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_input_file="$2"
				shift
				;;
			# See the comment of option '--connections_per_server=' to see what's going on here - principle is the same.
			--input_file=*)
				_arg_input_file="${_key##--input_file=}"
				;;
			# See the comment of option '-x' to see what's going on here - principle is the same.
			-i*)
				_arg_input_file="${_key##-i}"
				;;
			# See the comment of option '--connections_per_server' to see what's going on here - principle is the same.
			-j|--max_concurrent_downloads)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_max_concurrent_downloads="$2"
				shift
				;;
			# See the comment of option '--connections_per_server=' to see what's going on here - principle is the same.
			--max_concurrent_downloads=*)
				_arg_max_concurrent_downloads="${_key##--max_concurrent_downloads=}"
				;;
			# See the comment of option '-x' to see what's going on here - principle is the same.
			-j*)
				_arg_max_concurrent_downloads="${_key##-j}"
				;;
			# See the comment of option '--connections_per_server' to see what's going on here - principle is the same.
			-o|--out)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_out="$2"
				shift
				;;
			# See the comment of option '--connections_per_server=' to see what's going on here - principle is the same.
			--out=*)
				_arg_out="${_key##--out=}"
				;;
			# See the comment of option '-x' to see what's going on here - principle is the same.
			-o*)
				_arg_out="${_key##-o}"
				;;
			# The help argurment doesn't accept a value,
			# we expect the --help or -h, so we watch for them.
			-h|--help)
				print_help
				exit 0
				;;
			# We support getopts-style short arguments clustering,
			# so as -h doesn't accept value, other short options may be appended to it, so we watch for -h*.
			# After stripping the leading -h from the argument, we have to make sure
			# that the first character that follows coresponds to a short option.
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


# Take arguments that we have received, and save them in variables of given names.
# The 'eval' command is needed as the name of target variable is saved into another variable.
assign_positional_args()
{
	local _positional_name _shift_for=$1
	# We have an array of variables to which we want to save positional args values.
	# This array is able to hold array elements as targets.
	# As variables don't contain spaces, they may be held in space-separated string.
	_positional_names=""
	# If we allow up to infinitely many args, we calculate how many of values
	# were actually passed, and we extend the target array accordingly.
	# We also know that we have _pos_names_count known positional arguments.
	_our_args=$((${#_positionals[@]} - 0))
	for ((ii = 0; ii < _our_args; ii++))
	do
		_positional_names="$_positional_names _arg_uri[$((ii + 0))]"
	done

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

# Now call all the functions defined above that are needed to get the job done
parse_commandline "$@"
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# -c, --continue [true|false]
#               Continue  downloading  a partially downloaded file. Use this option to resume a download started
#               by a web browser or another program which downloads files sequentially from the beginning.
#               Currently this option is only applicable to HTTP(S)/FTP downloads.
# --optimize-concurrent-downloads [true|false|<A>:<B>]
#               Optimizes the number of concurrent downloads according to the bandwidth available. aria2 uses
#               the download speed observed in the previous downloads to adapt the number of downloads launched
#               in parallel according to the rule N = A + B Log10(speed in Mbps). The coefficients A and B can be
#               customized in the option arguments with A and B separated by a colon. The default  values (A=5, B=25)
#               lead to using typically 5 parallel downloads on 1Mbps networks and above 50 on 100Mbps networks.
#               The number of parallel downloads remains constrained under the maximum defined by the
#               --max-concurrent-downloads parameter.  Default: false
# -x, --max-connection-per-server=<NUM>
#               The maximum number of connections to one server for each download. Default: 1
# --summary-interval=<SEC>
#               Set interval in seconds to output download progress summary. Setting 0 suppresses the output. Default: 60
# -d, --dir=<DIR>
#               The directory to store the downloaded file.
# -o, --out=<FILE>
#               The file name of the downloaded file. It is always relative to the directory given in --dir option.
#               When the --force-sequential option is used, this option is ignored.
# -Z, --force-sequential [true|false]
#               Fetch URIs in the command-line sequentially and download each URI in a separate session, like the usual
#               command-line download utilities. Default: false

run_string="aria2c -c --optimize-concurrent-downloads -Z -x $_arg_connections_per_server --summary-interval 0 -d $_arg_dir"

if [ -n "$_arg_out" ] ; then
    run_string+=" -o $_arg_out"
fi

if [ -n "$_arg_max_concurrent_downloads" ] ; then
    run_string+=" --max-concurrent-downloads $_arg_max_concurrent_downloads"
fi

if [ -n "$_arg_input_file" ] ; then
    run_string+=" -i $_arg_input_file"
    echo "Running: $run_string"
    $run_string
else
    echo "Running: $run_string ${_arg_uri[*]}"
    $run_string ${_arg_uri[*]}
fi

# ] <-- needed because of Argbash
