#!/bin/bash
#
# Created by: George Araújo (george.gcac@gmail.com)
#
# ARG_OPTIONAL_SINGLE([container_name],[c],[container name],[])
# ARG_OPTIONAL_SINGLE([docker_image],[i],[name of docker image],[\$USER/jupyter])
# ARG_OPTIONAL_SINGLE([port],[p],[jupyter notebook connection port],[8888])
# ARG_OPTIONAL_SINGLE([screen_name],[s],[gnu screen session name],[])
# ARG_POSITIONAL_SINGLE([host],[remote host],[])
# ARG_POSITIONAL_SINGLE([nbdir],[jupyter notebook remote path],[])
# ARG_HELP([Launch jupyter notebook in a docker container in remote computer, redirecting to local port])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


# # When called, the process ends.
# Args:
# 	$1: The exit message (print to stderr)
# 	$2: The exit code (default is 1)
# if env var _PRINT_HELP is set to 'yes', the usage is print to stderr (prior to $1)
# Example:
# 	test -f "$_arg_infile" || _PRINT_HELP=yes die "Can't continue, have to supply file as an argument, got '$_arg_infile'" 4
die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


# Function that evaluates whether a value passed to it begins by a character
# that is a short option of an argument the script knows about.
# This is required in order to support getopts-like short options grouping.
begins_with_short_option()
{
	local first_option all_short_options='cipsh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
# The positional args array has to be reset before the parsing, because it may already be defined
# - for example if this script is sourced by an argbash-powered script.
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_container_name=
_arg_docker_image="\$USER/jupyter"
_arg_port="8888"
_arg_screen_name=


# Function that prints general usage of the script.
# This is useful if users asks for it, or if there is an argument parsing error (unexpected / spurious arguments)
# and it makes sense to remind the user how the script is supposed to be called.
print_help()
{
	printf '%s\n' "Launch jupyter notebook in a docker container in remote computer, redirecting to local port"
	printf 'Usage: %s [-c|--container_name <arg>] [-i|--docker_image <arg>] [-p|--port <arg>] [-s|--screen_name <arg>] [-h|--help] <host> <nbdir>\n' "$0"
	printf '\t%s\n' "<host>: remote host"
	printf '\t%s\n' "<nbdir>: jupyter notebook remote path"
	printf '\t%s\n' "-c, --container_name: container name (no default)"
	printf '\t%s\n' "-i, --docker_image: name of docker image (default: '\$USER/jupyter')"
	printf '\t%s\n' "-p, --port: jupyter notebook connection port (default: '8888')"
	printf '\t%s\n' "-s, --screen_name: gnu screen session name (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


# The parsing of the command-line
parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			# We support whitespace as a delimiter between option argument and its value.
			# Therefore, we expect the --container_name or -c value.
			# so we watch for --container_name and -c.
			# Since we know that we got the long or short option,
			# we just reach out for the next argument to get the value.
			-c|--container_name)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_container_name="$2"
				shift
				;;
			# We support the = as a delimiter between option argument and its value.
			# Therefore, we expect --container_name=value, so we watch for --container_name=*
			# For whatever we get, we strip '--container_name=' using the ${var##--container_name=} notation
			# to get the argument value
			--container_name=*)
				_arg_container_name="${_key##--container_name=}"
				;;
			# We support getopts-style short arguments grouping,
			# so as -c accepts value, we allow it to be appended to it, so we watch for -c*
			# and we strip the leading -c from the argument string using the ${var##-c} notation.
			-c*)
				_arg_container_name="${_key##-c}"
				;;
			# See the comment of option '--container_name' to see what's going on here - principle is the same.
			-i|--docker_image)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_docker_image="$2"
				shift
				;;
			# See the comment of option '--container_name=' to see what's going on here - principle is the same.
			--docker_image=*)
				_arg_docker_image="${_key##--docker_image=}"
				;;
			# See the comment of option '-c' to see what's going on here - principle is the same.
			-i*)
				_arg_docker_image="${_key##-i}"
				;;
			# See the comment of option '--container_name' to see what's going on here - principle is the same.
			-p|--port)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_port="$2"
				shift
				;;
			# See the comment of option '--container_name=' to see what's going on here - principle is the same.
			--port=*)
				_arg_port="${_key##--port=}"
				;;
			# See the comment of option '-c' to see what's going on here - principle is the same.
			-p*)
				_arg_port="${_key##-p}"
				;;
			# See the comment of option '--container_name' to see what's going on here - principle is the same.
			-s|--screen_name)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_screen_name="$2"
				shift
				;;
			# See the comment of option '--container_name=' to see what's going on here - principle is the same.
			--screen_name=*)
				_arg_screen_name="${_key##--screen_name=}"
				;;
			# See the comment of option '-c' to see what's going on here - principle is the same.
			-s*)
				_arg_screen_name="${_key##-s}"
				;;
			# The help argurment doesn't accept a value,
			# we expect the --help or -h, so we watch for them.
			-h|--help)
				print_help
				exit 0
				;;
			# We support getopts-style short arguments clustering,
			# so as -h doesn't accept value, other short options may be appended to it, so we watch for -h*.
			# After stripping the leading -h from the argument, we have to make sure
			# that the first character that follows coresponds to a short option.
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


# Check that we receive expected amount positional arguments.
# Return 0 if everything is OK, 1 if we have too little arguments
# and 2 if we have too much arguments
handle_passed_args_count()
{
	local _required_args_string="'host' and 'nbdir'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


# Take arguments that we have received, and save them in variables of given names.
# The 'eval' command is needed as the name of target variable is saved into another variable.
assign_positional_args()
{
	local _positional_name _shift_for=$1
	# We have an array of variables to which we want to save positional args values.
	# This array is able to hold array elements as targets.
	# As variables don't contain spaces, they may be held in space-separated string.
	_positional_names="_arg_host _arg_nbdir "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

# Now call all the functions defined above that are needed to get the job done
parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

container_port=8888

if [ -z "$_arg_container_name" ] ; then
  _arg_container_name="jl_$(basename $_arg_nbdir)"
fi

if [ -z "$_arg_screen_name" ] ; then
  _arg_screen_name="jl_$(basename $_arg_nbdir)"
fi

# autossh automatically tries to reconnect if ssh connection is lost
#     needs to be installed via $sudo apt install autossh
# screen command is used to keep the remote process executing even if the connection is lost

# Explaining:
# autossh -M 0
#     disable the built-in AutoSSH monitoring port, and use the information defined in ~/.ssh/config
#     ServerAliveInterval and ServerAliveCountMax
# -f
#     causes autossh to drop to the background before running ssh
# the other parameters are passed directly to ssh
# -t
#     Force pseudo-terminal allocation.  This is used to execute arbitrary screen-based programs on a remote machine (in this case, to execute the ‘screen -dR $USER’ line on remote machine $1).
# -X
#    Allow calls to programs that uses UI (eg: gedit, nautilus)
# -L $port:127.0.0.1:6006
#    Transfer the port 6006 of the remote server into the port $port of my machine
# screen -dR \$USER-tensorboard tensorboard --logdir $logdir
#     Reattach a session with name ‘$USER-tensorboard’ and if necessary detach or even create it first, and run tensorboard with $logdir as logdir

u=$(ssh -G $_arg_host | grep "^user ")
u=${u:5}

if [[ ${_arg_nbdir:0:1} != "/" ]] && [[ ${_arg_nbdir:0:1} != "~" ]] ; then
  # _arg_nbdir="/home/$u/"$_arg_nbdir
  _arg_nbdir="\$HOME/"$_arg_nbdir
fi

# LOCAL_PATH="/home/$u/.local"
JUPYTER_PATH="\$HOME/.jupyter"
LOCAL_PATH="\$HOME/.local"

# check if autossh is installed
if (hash autossh 2>/dev/null); then
  echo "Running: autossh -M 0 -t -X -L $_arg_port:127.0.0.1:$_arg_port $_arg_host ""screen -h 1000 -dR $_arg_screen_name nvidia-docker run --volume $_arg_nbdir:/logs --volume $LOCAL_PATH:$LOCAL_PATH --volume $JUPYTER_PATH:$JUPYTER_PATH --name $_arg_container_name --hostname docker_\$(hostname) --rm -it --dns 8.8.8.8 --userns=host --ipc=host --ulimit memlock=-1 -p $_arg_port:$container_port $_arg_docker_image jupyter notebook --ip 0.0.0.0 --no-browser --notebook-dir /logs --port $container_port"

  autossh -M 0 -t -X -L $_arg_port:127.0.0.1:$_arg_port $_arg_host "screen -h 1000 -dR $_arg_screen_name nvidia-docker run --volume $_arg_nbdir:/logs --volume $LOCAL_PATH:$LOCAL_PATH --volume $JUPYTER_PATH:$JUPYTER_PATH --name $_arg_container_name --hostname docker_\$(hostname) --rm -it --dns 8.8.8.8 --userns=host --ipc=host --ulimit memlock=-1 -p $_arg_port:$container_port $_arg_docker_image jupyter notebook --ip 0.0.0.0 --no-browser --notebook-dir /logs --port $container_port"
else
  echo "Running: ssh -t -X -L $_arg_port:127.0.0.1:$_arg_port $_arg_host ""screen -h 1000 -dR $_arg_screen_name nvidia-docker run --volume $_arg_nbdir:/logs --volume $LOCAL_PATH:$LOCAL_PATH --volume $JUPYTER_PATH:$JUPYTER_PATH --name $_arg_container_name --hostname docker_\$(hostname) --rm -it --dns 8.8.8.8 --userns=host --ipc=host --ulimit memlock=-1 -p $_arg_port:$container_port $_arg_docker_image jupyter notebook --ip 0.0.0.0 --no-browser --notebook-dir /logs --port $container_port"

  ssh -t -X -L $_arg_port:127.0.0.1:$_arg_port $_arg_host "screen -h 1000 -dR $_arg_screen_name nvidia-docker run --volume $_arg_nbdir:/logs --volume $LOCAL_PATH:$LOCAL_PATH --volume $JUPYTER_PATH:$JUPYTER_PATH --name $_arg_container_name --hostname docker_\$(hostname) --rm -it --dns 8.8.8.8 --userns=host --ipc=host --ulimit memlock=-1 -p $_arg_port:$container_port $_arg_docker_image jupyter notebook --ip 0.0.0.0 --no-browser --notebook-dir /logs --port $container_port"
fi

# ] <-- needed because of Argbash
