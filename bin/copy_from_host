#!/bin/bash
#
# Created by: George AraÃºjo (george.gcac@gmail.com)
#
# ARG_OPTIONAL_BOOLEAN([dry_run],[n],[perform a trial run with no changes made])
# ARG_OPTIONAL_BOOLEAN([exclude_git],[],[exclude files respecting .gitignore])
# ARG_OPTIONAL_SINGLE([excludes],[],[patterns to exclude from search (separated with spaces)])
# ARG_OPTIONAL_SINGLE([n_retries],[],[number of retries],[10])
# ARG_OPTIONAL_BOOLEAN([retry],[r],[retry if failed])
# ARG_OPTIONAL_BOOLEAN([send_telegram],[t],[send telegram message when finished])
# ARG_OPTIONAL_BOOLEAN([single_progress],[s],[show only one progress bar])
# ARG_POSITIONAL_SINGLE([host],[remote host],[])
# ARG_POSITIONAL_SINGLE([files],[files/folders to copy],[])
# ARG_POSITIONAL_SINGLE([local_dir],[local directory where to copy to],[.])
# ARG_HELP([Copy files/folders from remote host])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


# # When called, the process ends.
# Args:
# 	$1: The exit message (print to stderr)
# 	$2: The exit code (default is 1)
# if env var _PRINT_HELP is set to 'yes', the usage is print to stderr (prior to $1)
# Example:
# 	test -f "$_arg_infile" || _PRINT_HELP=yes die "Can't continue, have to supply file as an argument, got '$_arg_infile'" 4
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


# Function that evaluates whether a value passed to it begins by a character
# that is a short option of an argument the script knows about.
# This is required in order to support getopts-like short options grouping.
begins_with_short_option()
{
	local first_option all_short_options='nrtsh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
# The positional args array has to be reset before the parsing, because it may already be defined
# - for example if this script is sourced by an argbash-powered script.
_positionals=()
_arg_local_dir="."
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_dry_run="off"
_arg_exclude_git="off"
_arg_excludes=
_arg_n_retries="10"
_arg_retry="off"
_arg_send_telegram="off"
_arg_single_progress="off"


# Function that prints general usage of the script.
# This is useful if users asks for it, or if there is an argument parsing error (unexpected / spurious arguments)
# and it makes sense to remind the user how the script is supposed to be called.
print_help()
{
	printf '%s\n' "Copy files/folders from remote host"
	printf 'Usage: %s [-n|--(no-)dry_run] [--(no-)exclude_git] [--excludes <arg>] [--n_retries <arg>] [-r|--(no-)retry] [-t|--(no-)send_telegram] [-s|--(no-)single_progress] [-h|--help] <host> <files> [<local_dir>]\n' "$0"
	printf '\t%s\n' "<host>: remote host"
	printf '\t%s\n' "<files>: files/folders to copy"
	printf '\t%s\n' "<local_dir>: local directory where to copy to (default: '.')"
	printf '\t%s\n' "-n, --dry_run, --no-dry_run: perform a trial run with no changes made (off by default)"
	printf '\t%s\n' "--exclude_git, --no-exclude_git: exclude files respecting .gitignore (off by default)"
	printf '\t%s\n' "--excludes: patterns to exclude from search (separated with spaces) (no default)"
	printf '\t%s\n' "--n_retries: number of retries (default: '10')"
	printf '\t%s\n' "-r, --retry, --no-retry: retry if failed (off by default)"
	printf '\t%s\n' "-t, --send_telegram, --no-send_telegram: send telegram message when finished (off by default)"
	printf '\t%s\n' "-s, --single_progress, --no-single_progress: show only one progress bar (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


# The parsing of the command-line
parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			# The dry_run argurment doesn't accept a value,
			# we expect the --dry_run or -n, so we watch for them.
			-n|--no-dry_run|--dry_run)
				_arg_dry_run="on"
				test "${1:0:5}" = "--no-" && _arg_dry_run="off"
				;;
			# We support getopts-style short arguments clustering,
			# so as -n doesn't accept value, other short options may be appended to it, so we watch for -n*.
			# After stripping the leading -n from the argument, we have to make sure
			# that the first character that follows coresponds to a short option.
			-n*)
				_arg_dry_run="on"
				_next="${_key##-n}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-n" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			# See the comment of option '--dry_run' to see what's going on here - principle is the same.
			--no-exclude_git|--exclude_git)
				_arg_exclude_git="on"
				test "${1:0:5}" = "--no-" && _arg_exclude_git="off"
				;;
			# We support whitespace as a delimiter between option argument and its value.
			# Therefore, we expect the --excludes value, so we watch for --excludes.
			# Since we know that we got the long option,
			# we just reach out for the next argument to get the value.
			--excludes)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_excludes="$2"
				shift
				;;
			# We support the = as a delimiter between option argument and its value.
			# Therefore, we expect --excludes=value, so we watch for --excludes=*
			# For whatever we get, we strip '--excludes=' using the ${var##--excludes=} notation
			# to get the argument value
			--excludes=*)
				_arg_excludes="${_key##--excludes=}"
				;;
			# See the comment of option '--excludes' to see what's going on here - principle is the same.
			--n_retries)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_n_retries="$2"
				shift
				;;
			# See the comment of option '--excludes=' to see what's going on here - principle is the same.
			--n_retries=*)
				_arg_n_retries="${_key##--n_retries=}"
				;;
			# See the comment of option '--dry_run' to see what's going on here - principle is the same.
			-r|--no-retry|--retry)
				_arg_retry="on"
				test "${1:0:5}" = "--no-" && _arg_retry="off"
				;;
			# See the comment of option '-n' to see what's going on here - principle is the same.
			-r*)
				_arg_retry="on"
				_next="${_key##-r}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-r" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			# See the comment of option '--dry_run' to see what's going on here - principle is the same.
			-t|--no-send_telegram|--send_telegram)
				_arg_send_telegram="on"
				test "${1:0:5}" = "--no-" && _arg_send_telegram="off"
				;;
			# See the comment of option '-n' to see what's going on here - principle is the same.
			-t*)
				_arg_send_telegram="on"
				_next="${_key##-t}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-t" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			# See the comment of option '--dry_run' to see what's going on here - principle is the same.
			-s|--no-single_progress|--single_progress)
				_arg_single_progress="on"
				test "${1:0:5}" = "--no-" && _arg_single_progress="off"
				;;
			# See the comment of option '-n' to see what's going on here - principle is the same.
			-s*)
				_arg_single_progress="on"
				_next="${_key##-s}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-s" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			# See the comment of option '--dry_run' to see what's going on here - principle is the same.
			-h|--help)
				print_help
				exit 0
				;;
			# See the comment of option '-n' to see what's going on here - principle is the same.
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


# Check that we receive expected amount positional arguments.
# Return 0 if everything is OK, 1 if we have too little arguments
# and 2 if we have too much arguments
handle_passed_args_count()
{
	local _required_args_string="'host' and 'files'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require between 2 and 3 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 3 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 2 and 3 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


# Take arguments that we have received, and save them in variables of given names.
# The 'eval' command is needed as the name of target variable is saved into another variable.
assign_positional_args()
{
	local _positional_name _shift_for=$1
	# We have an array of variables to which we want to save positional args values.
	# This array is able to hold array elements as targets.
	# As variables don't contain spaces, they may be held in space-separated string.
	_positional_names="_arg_host _arg_files _arg_local_dir "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

# Now call all the functions defined above that are needed to get the job done
parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


if [[ $_arg_send_telegram == "on" ]] && ! (hash telegram-send 2>/dev/null); then
  echo "Error: telegram-send not installed. Install it with 'pip install telegram-send'"
  exit 1
fi

if [[ ${_arg_files:0:1} != "/" ]] ; then
  _arg_files="~/"$_arg_files
fi

run_string="rsync"

# --exclude=PATTERN       exclude files matching PATTERN
# -h      output numbers in a human-readable format
# --info=progress2            show progress during transfer
# -l      copy symlinks as symlinks
# --no-inc-recursive          scan completely before copying and knows/displays how much work is left
# -n, --dry-run               perform a trial run with no changes made
# -P      keep partially transferred files
#         show progress during transfer
# -p      preserve permissions
# -r      recurse into directories
# -t      preserve modification times
# -z      compress file data during the transfer
# -e      specify the remote shell to use

if [[ $_arg_dry_run == "on" ]] ; then
  run_string+=" -n"
fi

if [[ $_arg_exclude_git == "on" ]] ; then
  exclude_from="--exclude-from $(git -C $_arg_local_dir ls-files \
        --exclude-standard -oi --directory > /tmp/ignores.tmp && \
        echo /tmp/ignores.tmp)"
  run_string+=" $exclude_from"
fi

if [ -n "$_arg_excludes" ] ; then
  excludes=($_arg_excludes)

  for exc in "${excludes[@]}"; do
    run_string+=" --exclude=$exc"
  done
fi

if [[ $_arg_single_progress == "on" ]] ; then
  run_string+=" --partial --no-inc-recursive --info=progress2 -hlrtze"
else
  run_string+=" -hlPrtze"
fi

run_string+=" ssh $_arg_host:$_arg_files $_arg_local_dir"

echo "Executing: $run_string"

if [[ $_arg_retry == "on" ]] ; then
  RC=1
  count=0

  # Trap interrupts and exit instead of continuing the loop
  trap "echo Exited!; exit;" SIGINT SIGTERM

  while [[ $RC -ne 0 ]] && [[ $count -le $_arg_n_retries ]]; do
    if [[ count -eq 0 ]]; then
      $run_string
    else
      echo "Retry $count of $_arg_n_retries in 3s..."
      sleep 3
      $run_string
    fi
    RC=$?
    count=$((count + 1))
  done

  if [[ $count -eq $_arg_n_retries ]] ; then
    echo "Hit $_arg_n_retries retries, giving up."
  fi

else
  $run_string
fi

if [[ $count -lt $_arg_n_retries ]] && [[ $_arg_send_telegram == "on" ]]; then
  telegram-send "Finished copying $_arg_host:$_arg_files to $_arg_local_dir"
fi

# ] <-- needed because of Argbash
