#!/bin/bash
#
# Created by: George AraÃºjo (george.gcac@gmail.com)
#
# ARG_OPTIONAL_SINGLE([excludes_dirs],[],[paths to exclude from search (separated with spaces)])
# ARG_OPTIONAL_SINGLE([excludes_files],[],[files to exclude from search (separated with spaces)])
# ARG_OPTIONAL_SINGLE([excludes_str],[],[strings to exclude from search (separated with spaces)])
# ARG_OPTIONAL_BOOLEAN([files_with_matches],[l],[only print the paths with at least one match])
# ARG_OPTIONAL_BOOLEAN([files_without_matches],[],[only print the paths that contain zero matches])
# ARG_OPTIONAL_BOOLEAN([ignore_case],[i],[ignore case])
# ARG_POSITIONAL_SINGLE([search_str],[string to search],[])
# ARG_POSITIONAL_SINGLE([path],[base directory to start search],[.])
# ARG_HELP([Search for string in directory excluding git, pycache, and given folders])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


# # When called, the process ends.
# Args:
# 	$1: The exit message (print to stderr)
# 	$2: The exit code (default is 1)
# if env var _PRINT_HELP is set to 'yes', the usage is print to stderr (prior to $1)
# Example:
# 	test -f "$_arg_infile" || _PRINT_HELP=yes die "Can't continue, have to supply file as an argument, got '$_arg_infile'" 4
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


# Function that evaluates whether a value passed to it begins by a character
# that is a short option of an argument the script knows about.
# This is required in order to support getopts-like short options grouping.
begins_with_short_option()
{
	local first_option all_short_options='lih'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
# The positional args array has to be reset before the parsing, because it may already be defined
# - for example if this script is sourced by an argbash-powered script.
_positionals=()
_arg_path="."
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_excludes_dirs=
_arg_excludes_files=
_arg_excludes_str=
_arg_files_with_matches="off"
_arg_files_without_matches="off"
_arg_ignore_case="off"


# Function that prints general usage of the script.
# This is useful if users asks for it, or if there is an argument parsing error (unexpected / spurious arguments)
# and it makes sense to remind the user how the script is supposed to be called.
print_help()
{
	printf '%s\n' "Search for string in directory excluding git, pycache, and given folders"
	printf 'Usage: %s [--excludes_dirs <arg>] [--excludes_files <arg>] [--excludes_str <arg>] [-l|--(no-)files_with_matches] [--(no-)files_without_matches] [-i|--(no-)ignore_case] [-h|--help] <search_str> [<path>]\n' "$0"
	printf '\t%s\n' "<search_str>: string to search"
	printf '\t%s\n' "<path>: base directory to start search (default: '.')"
	printf '\t%s\n' "--excludes_dirs: paths to exclude from search (separated with spaces) (no default)"
	printf '\t%s\n' "--excludes_files: files to exclude from search (separated with spaces) (no default)"
	printf '\t%s\n' "--excludes_str: strings to exclude from search (separated with spaces) (no default)"
	printf '\t%s\n' "-l, --files_with_matches, --no-files_with_matches: only print the paths with at least one match (off by default)"
	printf '\t%s\n' "--files_without_matches, --no-files_without_matches: only print the paths that contain zero matches (off by default)"
	printf '\t%s\n' "-i, --ignore_case, --no-ignore_case: ignore case (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


# The parsing of the command-line
parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			# We support whitespace as a delimiter between option argument and its value.
			# Therefore, we expect the --excludes_dirs value, so we watch for --excludes_dirs.
			# Since we know that we got the long option,
			# we just reach out for the next argument to get the value.
			--excludes_dirs)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_excludes_dirs="$2"
				shift
				;;
			# We support the = as a delimiter between option argument and its value.
			# Therefore, we expect --excludes_dirs=value, so we watch for --excludes_dirs=*
			# For whatever we get, we strip '--excludes_dirs=' using the ${var##--excludes_dirs=} notation
			# to get the argument value
			--excludes_dirs=*)
				_arg_excludes_dirs="${_key##--excludes_dirs=}"
				;;
			# See the comment of option '--excludes_dirs' to see what's going on here - principle is the same.
			--excludes_files)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_excludes_files="$2"
				shift
				;;
			# See the comment of option '--excludes_dirs=' to see what's going on here - principle is the same.
			--excludes_files=*)
				_arg_excludes_files="${_key##--excludes_files=}"
				;;
			# See the comment of option '--excludes_dirs' to see what's going on here - principle is the same.
			--excludes_str)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_excludes_str="$2"
				shift
				;;
			# See the comment of option '--excludes_dirs=' to see what's going on here - principle is the same.
			--excludes_str=*)
				_arg_excludes_str="${_key##--excludes_str=}"
				;;
			# The files_with_matches argurment doesn't accept a value,
			# we expect the --files_with_matches or -l, so we watch for them.
			-l|--no-files_with_matches|--files_with_matches)
				_arg_files_with_matches="on"
				test "${1:0:5}" = "--no-" && _arg_files_with_matches="off"
				;;
			# We support getopts-style short arguments clustering,
			# so as -l doesn't accept value, other short options may be appended to it, so we watch for -l*.
			# After stripping the leading -l from the argument, we have to make sure
			# that the first character that follows coresponds to a short option.
			-l*)
				_arg_files_with_matches="on"
				_next="${_key##-l}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-l" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			# See the comment of option '--files_with_matches' to see what's going on here - principle is the same.
			--no-files_without_matches|--files_without_matches)
				_arg_files_without_matches="on"
				test "${1:0:5}" = "--no-" && _arg_files_without_matches="off"
				;;
			# See the comment of option '--files_with_matches' to see what's going on here - principle is the same.
			-i|--no-ignore_case|--ignore_case)
				_arg_ignore_case="on"
				test "${1:0:5}" = "--no-" && _arg_ignore_case="off"
				;;
			# See the comment of option '-l' to see what's going on here - principle is the same.
			-i*)
				_arg_ignore_case="on"
				_next="${_key##-i}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-i" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			# See the comment of option '--files_with_matches' to see what's going on here - principle is the same.
			-h|--help)
				print_help
				exit 0
				;;
			# See the comment of option '-l' to see what's going on here - principle is the same.
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


# Check that we receive expected amount positional arguments.
# Return 0 if everything is OK, 1 if we have too little arguments
# and 2 if we have too much arguments
handle_passed_args_count()
{
	local _required_args_string="'search_str'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require between 1 and 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 1 and 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


# Take arguments that we have received, and save them in variables of given names.
# The 'eval' command is needed as the name of target variable is saved into another variable.
assign_positional_args()
{
	local _positional_name _shift_for=$1
	# We have an array of variables to which we want to save positional args values.
	# This array is able to hold array elements as targets.
	# As variables don't contain spaces, they may be held in space-separated string.
	_positional_names="_arg_search_str _arg_path "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

# Now call all the functions defined above that are needed to get the job done
parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


if (hash rg 2>/dev/null); then
    use_ripgrep=1
    run_str="rg"
else
    run_str="grep"
fi

if [ -n "$_arg_excludes_files" ] ; then
    excludes_files=($_arg_excludes_files)
    for exc in "${excludes_files[@]}"; do
        if [ -n "$use_ripgrep" ] ; then
            run_str+=" -g '!$exc'"
        else
            run_str+=" --exclude=$exc"
        fi
    done
fi

if [ -n "$_arg_excludes_dirs" ] ; then
    if [ -n "$use_ripgrep" ] ; then
        excludes_dirs="$_arg_excludes_dirs"
    else
        excludes_dirs=".git/ __pycache__/"
        excludes_dirs+=" $_arg_excludes_dirs"
    fi
fi

if [ -z "$use_ripgrep" ] ; then
    excludes_dirs=($excludes_dirs)
    for exc in "${excludes_dirs[@]}"; do
        run_str+=" --exclude-dir=$exc"
    done
elif [ -n "$_arg_excludes_dirs" ] ; then
    excludes_dirs=($excludes_dirs)
    for exc in "${excludes_dirs[@]}"; do
        if [[ ${exc: -1} != "/" ]] ; then
            exc+="/"
        fi
        run_str+=" -g '!$exc'"
    done
fi

if [[ $_arg_ignore_case == "on" ]] ; then
    run_str+=" -i"
fi

if [[ $_arg_files_with_matches == "on" ]] ; then
    run_str+=" --files-with-matches"
elif [[ $_arg_files_without_matches == "on" ]] ; then
    run_str+=" --files-without-match"
fi

if [ -z "$use_ripgrep" ] ; then
    # -I avoids showing binary files results
    run_str+=" -I -nr \"$_arg_search_str\" \"$_arg_path\""
else
    run_str+=" \"$_arg_search_str\" \"$_arg_path\""
fi

if [ -n "$_arg_excludes_str" ] ; then
    excludes_str=($_arg_excludes_str)

    for exc in "${excludes_str[@]}"; do
        if [ -n "$use_ripgrep" ] ; then
            # -p Alias for --color always --heading --line-number
            run_str+=" | rg -p -v \"$exc\""
        else
            run_str+=" | grep -v \"$exc\""
        fi
    done
fi

eval $run_str

# ] <-- needed because of Argbash
