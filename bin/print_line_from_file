#!/bin/bash
#
# Created by: George AraÃºjo (george.gcac@gmail.com)
#
# ARG_OPTIONAL_SINGLE([language],[l],[language to use in syntax highlight])
# ARG_OPTIONAL_BOOLEAN([highlight],[s],[enable syntax highlight])
# ARG_POSITIONAL_SINGLE([line_number],[line number to read],[])
# ARG_POSITIONAL_SINGLE([file],[file to read from],[])
# ARG_HELP([Read specific line from file, with syntax highlight support])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


# # When called, the process ends.
# Args:
# 	$1: The exit message (print to stderr)
# 	$2: The exit code (default is 1)
# if env var _PRINT_HELP is set to 'yes', the usage is print to stderr (prior to $1)
# Example:
# 	test -f "$_arg_infile" || _PRINT_HELP=yes die "Can't continue, have to supply file as an argument, got '$_arg_infile'" 4
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


# Function that evaluates whether a value passed to it begins by a character
# that is a short option of an argument the script knows about.
# This is required in order to support getopts-like short options grouping.
begins_with_short_option()
{
	local first_option all_short_options='lsh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
# The positional args array has to be reset before the parsing, because it may already be defined
# - for example if this script is sourced by an argbash-powered script.
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_language=
_arg_highlight="off"


# Function that prints general usage of the script.
# This is useful if users asks for it, or if there is an argument parsing error (unexpected / spurious arguments)
# and it makes sense to remind the user how the script is supposed to be called.
print_help()
{
	printf '%s\n' "Read specific line from file, with syntax highlight support"
	printf 'Usage: %s [-l|--language <arg>] [-s|--(no-)highlight] [-h|--help] <line_number> <file>\n' "$0"
	printf '\t%s\n' "<line_number>: line number to read"
	printf '\t%s\n' "<file>: file to read from"
	printf '\t%s\n' "-l, --language: language to use in syntax highlight (no default)"
	printf '\t%s\n' "-s, --highlight, --no-highlight: enable syntax highlight (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


# The parsing of the command-line
parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			# We support whitespace as a delimiter between option argument and its value.
			# Therefore, we expect the --language or -l value.
			# so we watch for --language and -l.
			# Since we know that we got the long or short option,
			# we just reach out for the next argument to get the value.
			-l|--language)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_language="$2"
				shift
				;;
			# We support the = as a delimiter between option argument and its value.
			# Therefore, we expect --language=value, so we watch for --language=*
			# For whatever we get, we strip '--language=' using the ${var##--language=} notation
			# to get the argument value
			--language=*)
				_arg_language="${_key##--language=}"
				;;
			# We support getopts-style short arguments grouping,
			# so as -l accepts value, we allow it to be appended to it, so we watch for -l*
			# and we strip the leading -l from the argument string using the ${var##-l} notation.
			-l*)
				_arg_language="${_key##-l}"
				;;
			# The highlight argurment doesn't accept a value,
			# we expect the --highlight or -s, so we watch for them.
			-s|--no-highlight|--highlight)
				_arg_highlight="on"
				test "${1:0:5}" = "--no-" && _arg_highlight="off"
				;;
			# We support getopts-style short arguments clustering,
			# so as -s doesn't accept value, other short options may be appended to it, so we watch for -s*.
			# After stripping the leading -s from the argument, we have to make sure
			# that the first character that follows coresponds to a short option.
			-s*)
				_arg_highlight="on"
				_next="${_key##-s}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-s" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			# See the comment of option '--highlight' to see what's going on here - principle is the same.
			-h|--help)
				print_help
				exit 0
				;;
			# See the comment of option '-s' to see what's going on here - principle is the same.
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


# Check that we receive expected amount positional arguments.
# Return 0 if everything is OK, 1 if we have too little arguments
# and 2 if we have too much arguments
handle_passed_args_count()
{
	local _required_args_string="'line_number' and 'file'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


# Take arguments that we have received, and save them in variables of given names.
# The 'eval' command is needed as the name of target variable is saved into another variable.
assign_positional_args()
{
	local _positional_name _shift_for=$1
	# We have an array of variables to which we want to save positional args values.
	# This array is able to hold array elements as targets.
	# As variables don't contain spaces, they may be held in space-separated string.
	_positional_names="_arg_line_number _arg_file "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

# Now call all the functions defined above that are needed to get the job done
parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


if [[ $_arg_highlight == "on" ]] ; then
  if hash highlight 2>/dev/null; then
    sed "${_arg_line_number}q;d" $_arg_file | highlight --syntax "$_arg_language" -O ansi
  else
    echo -e "Syntax highlight not supported. Please install highlight via\n\tsudo apt install highlight"
  fi
else
  sed "${_arg_line_number}q;d" $_arg_file
fi

# ] <-- needed because of Argbash
